unit Webservice.Input;

interface

uses Classes, Generics.Collections, System.Json;

type

TInput = class
private
  FColumnNames: TArray<string>;
  FValues: TArray<TArray<string>>;
public
  property ColumnNames: TArray<string> read FColumnNames write FColumnNames;
  property Values: TArray<TArray<String>> read FValues write FValues;
  function Json: TJSONValue;
end;

implementation

{TInput}

function TInput.Json: TJSONValue;
var
  jvInput1: TJSONObject;
  jvColumnNames: TJSONArray;
  jvValues: TJSONArray;
  jvValue: TJSONArray;
  i,j: Integer;
begin
  jvInput1:= TJSONObject.Create;
  jvColumnNames:= TJSONArray.Create;
  jvValues:= TJSONArray.Create;
  for i:= 0 to Pred(Length(FColumnNames)) do jvColumnNames.Add(FColumnNames[i]);
  for i:= 0 to Pred(Length(FValues)) do
  begin
    jvValue:= TJSONArray.Create;
    for j:= 0 to Pred(Length(FValues[i])) do
      jvValue.Add(FValues[i][j]);
    jvValues.Add(jvValue);
  end;
  jvInput1.AddPair('labels', jvValues);
  result := jvInput1;
end;

end.
